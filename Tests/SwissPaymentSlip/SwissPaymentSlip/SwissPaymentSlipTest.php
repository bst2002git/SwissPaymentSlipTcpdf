<?php
namespace SwissPaymentSlip\SwissPaymentSlip;

require __DIR__ . '/../../../vendor/autoload.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-04 at 18:39:52.
 */
class SwissPaymentSlipTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SwissPaymentSlip
     */
    protected $object;

	/**
	 * @var array
	 */
	protected $defaultAttributes;

	/**
	 * @var array
	 */
	protected $setAttributes;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
		$slipData = new SwissPaymentSlipData();
        $this->object = new SwissPaymentSlip($slipData);

		$attributes['PosX'] = 0;
		$attributes['PosY'] = 0;
		$attributes['Width'] = 0;
		$attributes['Height'] = 0;
		$attributes['Background'] = 'transparent';
		$attributes['FontFamily'] = 'Helvetica';
		$attributes['FontSize'] = '10';
		$attributes['FontColor'] = '#000';
		$attributes['LineHeight'] = 4;
		$attributes['TextAlign'] = 'L';

		$this->defaultAttributes = $attributes;


		$attributes['PosX'] = 123;
		$attributes['PosY'] = 456;
		$attributes['Width'] = 987;
		$attributes['Height'] = 654;
		$attributes['Background'] = '#123456';
		$attributes['FontFamily'] = 'Courier';
		$attributes['FontSize'] = '1';
		$attributes['FontColor'] = '#654321';
		$attributes['LineHeight'] = '15';
		$attributes['TextAlign'] = 'C';

		$this->setAttributes = $attributes;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::__construct
	 */
	public function testIsInstanceOf()
	{
		$this->assertInstanceOf('SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip',
			new SwissPaymentSlip(new SwissPaymentSlipData()));
		$this->assertInstanceOf('SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip',
			new SwissPaymentSlip(new SwissPaymentSlipData(), 100));
		$this->assertInstanceOf('SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip',
			new SwissPaymentSlip(new SwissPaymentSlipData(), 100, 100));
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::__construct
	 * @expectedException \InvalidArgumentException
	 */
	public function testNullSlipDataParameter()
	{
		new SwissPaymentSlip(null);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::__construct
	 * @expectedException \InvalidArgumentException
	 */
	public function testInvalidSlipDataParameter()
	{
		new SwissPaymentSlip(new \ArrayObject());
	}

    /**
     * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getPaymentSlipData
     */
    public function testGetPaymentSlipDataIsInstanceOf()
    {
		$this->assertInstanceOf('SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlipData',
			$this->object->getPaymentSlipData());
    }

    /**
     * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setSlipPosition
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setSlipPosX
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setSlipPosY
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getSlipPosX
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getSlipPosY
     */
    public function testSetSlipPosition()
    {
		$this->assertTrue($this->object->setSlipPosition(200, 100));
		$this->assertEquals(200, $this->object->getSlipPosX());
		$this->assertEquals(100, $this->object->getSlipPosY());

		$this->assertFalse($this->object->setSlipPosition('A', 100));
		$this->assertEquals(200, $this->object->getSlipPosX());
		$this->assertEquals(100, $this->object->getSlipPosY());

		$this->assertFalse($this->object->setSlipPosition(200, 'B'));
		$this->assertEquals(200, $this->object->getSlipPosX());
		$this->assertEquals(100, $this->object->getSlipPosY());
    }

    /**
     * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setSlipSize
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setSlipWidth
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setSlipHeight
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getSlipWidth
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getSlipHeight
     */
    public function testSetSlipSize()
    {
		$this->assertTrue($this->object->setSlipSize(200, 100));
		$this->assertEquals(200, $this->object->getSlipWidth());
		$this->assertEquals(100, $this->object->getSlipHeight());

		$this->assertFalse($this->object->setSlipSize('A', 100));
		$this->assertEquals(200, $this->object->getSlipWidth());
		$this->assertEquals(100, $this->object->getSlipHeight());

		$this->assertFalse($this->object->setSlipSize(200, 'B'));
		$this->assertEquals(200, $this->object->getSlipWidth());
		$this->assertEquals(100, $this->object->getSlipHeight());
    }

    /**
     * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setSlipBackground
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getSlipBackground
     */
    public function testSetSlipBackground()
    {
		$this->assertTrue($this->object->setSlipBackground('#123456'));
		$this->assertEquals('#123456', $this->object->getSlipBackground());

		$this->assertTrue($this->object->setSlipBackground(__DIR__.'/Resources/img/ezs_orange.gif'));
		$this->assertEquals(__DIR__.'/Resources/img/ezs_orange.gif', $this->object->getSlipBackground());
    }

    /**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
     */
    public function testBankLeftAttrDefaultValuesOrangeType()
    {
		$attributes = $this->object->getBankLeftAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 3;
		$expectedAttributes['PosY'] = 8;
		$expectedAttributes['Width'] = 50;
		$expectedAttributes['Height'] = 4;

		$this->assertEquals($expectedAttributes, $attributes);
    }

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testBankRightAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getBankRightAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 66;
		$expectedAttributes['PosY'] = 8;
		$expectedAttributes['Width'] = 50;
		$expectedAttributes['Height'] = 4;

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testRecipientLeftAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getRecipientLeftAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 3;
		$expectedAttributes['PosY'] = 23;
		$expectedAttributes['Width'] = 50;
		$expectedAttributes['Height'] = 4;

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testRecipientRightAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getRecipientRightAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 66;
		$expectedAttributes['PosY'] = 23;
		$expectedAttributes['Width'] = 50;
		$expectedAttributes['Height'] = 4;

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testAccountLeftAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getAccountLeftAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 27;
		$expectedAttributes['PosY'] = 43;
		$expectedAttributes['Width'] = 30;
		$expectedAttributes['Height'] = 4;

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testAccountRightAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getAccountRightAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 90;
		$expectedAttributes['PosY'] = 43;
		$expectedAttributes['Width'] = 30;
		$expectedAttributes['Height'] = 4;

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testAmountFrancsLeftAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getAmountFrancsLeftAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 5;
		$expectedAttributes['PosY'] = 50.5;
		$expectedAttributes['Width'] = 35;
		$expectedAttributes['Height'] = 4;
		$expectedAttributes['TextAlign'] = 'R';

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testAmountFrancsRightAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getAmountFrancsRightAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 66;
		$expectedAttributes['PosY'] = 50.5;
		$expectedAttributes['Width'] = 35;
		$expectedAttributes['Height'] = 4;
		$expectedAttributes['TextAlign'] = 'R';

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testAmountCentsLeftAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getAmountCentsLeftAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 50;
		$expectedAttributes['PosY'] = 50.5;
		$expectedAttributes['Width'] = 6;
		$expectedAttributes['Height'] = 4;

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testAmountCentsRightAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getAmountCentsRightAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 111;
		$expectedAttributes['PosY'] = 50.5;
		$expectedAttributes['Width'] = 6;
		$expectedAttributes['Height'] = 4;

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testReferenceNumberLeftAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getReferenceNumberLeftAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 3;
		$expectedAttributes['PosY'] = 60;
		$expectedAttributes['Width'] = 50;
		$expectedAttributes['Height'] = 4;
		$expectedAttributes['FontSize'] = 8;

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testReferenceNumberRightAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getReferenceNumberRightAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 125;
		$expectedAttributes['PosY'] = 33.5;
		$expectedAttributes['Width'] = 80;
		$expectedAttributes['Height'] = 4;
		$expectedAttributes['TextAlign'] = 'R';

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testPayerLeftAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getPayerLeftAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 3;
		$expectedAttributes['PosY'] = 65;
		$expectedAttributes['Width'] = 50;
		$expectedAttributes['Height'] = 4;

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testPayerRightAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getPayerRightAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 125;
		$expectedAttributes['PosY'] = 48;
		$expectedAttributes['Width'] = 50;
		$expectedAttributes['Height'] = 4;

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testCodeLineAttrDefaultValuesOrangeType()
	{
		$attributes = $this->object->getCodeLineAttr();

		$expectedAttributes = $this->defaultAttributes;

		$expectedAttributes['PosX'] = 64;
		$expectedAttributes['PosY'] = 85;
		$expectedAttributes['Width'] = 140;
		$expectedAttributes['Height'] = 4;
		$expectedAttributes['FontFamily'] = 'OCRB10';
		$expectedAttributes['TextAlign'] = 'R';

		$this->assertEquals($expectedAttributes, $attributes);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testSlipBackgroundDefaultValuesOrangeType()
	{
		$this->assertEquals('ezs_orange.gif', basename($this->object->getSlipBackground()));
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testBankLeftAttrDefaultValuesRedType
	 */
	public function testBankLeftAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testBankRightAttrDefaultValuesRedType
	 */
	public function testBankRightAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testRecipientLeftAttrDefaultValuesRedType
	 */
	public function testRecipientLeftAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testRecipientRightAttrDefaultValuesRedType
	 */
	public function testRecipientRightAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testAccountLeftAttrDefaultValuesRedType
	 */
	public function testAccountLeftAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testAccountRightAttrDefaultValuesRedType
	 */
	public function testAccountRightAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testAmountFrancsLeftAttrDefaultValuesRedType
	 */
	public function testAmountFrancsLeftAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testAmountFrancsRightAttrDefaultValuesRedType
	 */
	public function testAmountFrancsRightAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testAmountCentsLeftAttrDefaultValuesRedType
	 */
	public function testAmountCentsLeftAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testAmountCentsRightAttrDefaultValuesRedType
	 */
	public function testAmountCentsRightAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testReferenceNumberLeftAttrDefaultValuesRedType
	 */
	public function testReferenceNumberLeftAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testReferenceNumberRightAttrDefaultValuesRedType
	 */
	public function testReferenceNumberRightAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testPayerLeftAttrDefaultValuesRedType
	 */
	public function testPayerLeftAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testPayerRightAttrDefaultValuesRedType
	 */
	public function testPayerRightAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 * @todo Implement testCodeLineAttrDefaultValuesRedType
	 */
	public function testCodeLineAttrDefaultValuesRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDefaults
	 */
	public function testSlipBackgroundDefaultValuesRedType()
	{
		$slipData = new SwissPaymentSlipData('red');
		$this->object = new SwissPaymentSlip($slipData);

		$this->assertEquals('ezs_red.gif', basename($this->object->getSlipBackground()));
	}

    /**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setBankLeftAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
     * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getBankLeftAttr
     */
    public function testSetBankLeftAttr()
    {
		$this->assertTrue($this->object->setBankLeftAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getBankLeftAttr());
    }

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setBankRightAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getBankRightAttr
	 */
	public function testSetBankRightAttr()
	{
		$this->assertTrue($this->object->setBankRightAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getBankRightAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setRecipientLeftAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getRecipientLeftAttr
	 */
	public function testSetRecipientLeftAttr()
	{
		$this->assertTrue($this->object->setRecipientLeftAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getRecipientLeftAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setRecipientRightAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getRecipientRightAttr
	 */
	public function testSetRecipientRightAttr()
	{
		$this->assertTrue($this->object->setRecipientRightAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getRecipientRightAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAccountLeftAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getAccountLeftAttr
	 */
	public function testSetAccountLeftAttr()
	{
		$this->assertTrue($this->object->setAccountLeftAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getAccountLeftAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAccountRightAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getAccountRightAttr
	 */
	public function testSetAccountRightAttr()
	{
		$this->assertTrue($this->object->setAccountRightAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getAccountRightAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAmountFrancsLeftAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getAmountFrancsLeftAttr
	 */
	public function testSetAmountFrancsLeftAttr()
	{
		$this->assertTrue($this->object->setAmountFrancsLeftAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getAmountFrancsLeftAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAmountCentsLeftAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getAmountCentsLeftAttr
	 */
	public function testSetAmountCentsLeftAttr()
	{
		$this->assertTrue($this->object->setAmountCentsLeftAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getAmountCentsLeftAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAmountCentsRightAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getAmountCentsRightAttr
	 */
	public function testSetAmountCentsRightAttr()
	{
		$this->assertTrue($this->object->setAmountCentsRightAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getAmountCentsRightAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAmountFrancsRightAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getAmountFrancsRightAttr
	 */
	public function testSetAmountFrancsRightAttr()
	{
		$this->assertTrue($this->object->setAmountFrancsRightAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getAmountFrancsRightAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setReferenceNumberLeftAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getReferenceNumberLeftAttr
	 */
	public function testSetReferenceNumberLeftAttr()
	{
		$this->assertTrue($this->object->setReferenceNumberLeftAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getReferenceNumberLeftAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setReferenceNumberRightAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getReferenceNumberRightAttr
	 */
	public function testSetReferenceNumberRightAttr()
	{
		$this->assertTrue($this->object->setReferenceNumberRightAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getReferenceNumberRightAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setPayerLeftAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getPayerLeftAttr
	 */
	public function testSetPayerLeftAttr()
	{
		$this->assertTrue($this->object->setPayerLeftAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getPayerLeftAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setPayerRightAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getPayerRightAttr
	 */
	public function testSetPayerRightAttr()
	{
		$this->assertTrue($this->object->setPayerRightAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getPayerRightAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setCodeLineAttr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setAttributes
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getCodeLineAttr
	 */
	public function testSetCodeLineAttr()
	{
		$this->assertTrue($this->object->setCodeLineAttr(123, 456, 987, 654, '#123456', 'Courier', '1', '#654321', '15', 'C'));
		$this->assertEquals($this->setAttributes, $this->object->getCodeLineAttr());
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDisplayBank
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getDisplayBank
	 */
	public function testSetDisplayBank()
	{
		$this->assertTrue($this->object->setDisplayBank());
		$this->assertEquals(true, $this->object->getDisplayBank());

		$this->assertTrue($this->object->setDisplayBank(true));
		$this->assertEquals(true, $this->object->getDisplayBank());

		$this->assertTrue($this->object->setDisplayBank(false));
		$this->assertEquals(false, $this->object->getDisplayBank());

		$this->assertFalse($this->object->setDisplayBank('XXX'));
	}

    /**
     * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDisplayAccount
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getDisplayAccount
     */
    public function testSetDisplayAccount()
    {
		$this->assertTrue($this->object->setDisplayAccount());
		$this->assertEquals(true, $this->object->getDisplayAccount());

		$this->assertTrue($this->object->setDisplayAccount(true));
		$this->assertEquals(true, $this->object->getDisplayAccount());

		$this->assertTrue($this->object->setDisplayAccount(false));
		$this->assertEquals(false, $this->object->getDisplayAccount());

		$this->assertFalse($this->object->setDisplayAccount('XXX'));
    }

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDisplayRecipient
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getDisplayRecipient
	 */
	public function testSetDisplayRecipient()
	{
		$this->assertTrue($this->object->setDisplayRecipient());
		$this->assertEquals(true, $this->object->getDisplayRecipient());

		$this->assertTrue($this->object->setDisplayRecipient(true));
		$this->assertEquals(true, $this->object->getDisplayRecipient());

		$this->assertTrue($this->object->setDisplayRecipient(false));
		$this->assertEquals(false, $this->object->getDisplayRecipient());

		$this->assertFalse($this->object->setDisplayRecipient('XXX'));
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDisplayAmount
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getDisplayAmount
	 */
	public function testSetDisplayAmount()
	{
		$this->assertTrue($this->object->setDisplayAmount());
		$this->assertEquals(true, $this->object->getDisplayAmount());

		$this->assertTrue($this->object->setDisplayAmount(true));
		$this->assertEquals(true, $this->object->getDisplayAmount());

		$this->assertTrue($this->object->setDisplayAmount(false));
		$this->assertEquals(false, $this->object->getDisplayAmount());

		$this->assertFalse($this->object->setDisplayAmount('XXX'));
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDisplayReferenceNr
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getDisplayReferenceNr
	 */
	public function testSetDisplayReferenceNr()
	{
		$this->assertTrue($this->object->setDisplayReferenceNr());
		$this->assertEquals(true, $this->object->getDisplayReferenceNr());

		$this->assertTrue($this->object->setDisplayReferenceNr(true));
		$this->assertEquals(true, $this->object->getDisplayReferenceNr());

		$this->assertTrue($this->object->setDisplayReferenceNr(false));
		$this->assertEquals(false, $this->object->getDisplayReferenceNr());

		$this->assertFalse($this->object->setDisplayReferenceNr('XXX'));
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDisplayPayer
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getDisplayPayer
	 */
	public function testSetDisplayPayer()
	{
		$this->assertTrue($this->object->setDisplayPayer());
		$this->assertEquals(true, $this->object->getDisplayPayer());

		$this->assertTrue($this->object->setDisplayPayer(true));
		$this->assertEquals(true, $this->object->getDisplayPayer());

		$this->assertTrue($this->object->setDisplayPayer(false));
		$this->assertEquals(false, $this->object->getDisplayPayer());

		$this->assertFalse($this->object->setDisplayPayer('XXX'));
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDisplayCodeLine
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getDisplayCodeLine
	 */
	public function testSetDisplayCodeLine()
	{
		$this->assertTrue($this->object->setDisplayCodeLine());
		$this->assertEquals(true, $this->object->getDisplayCodeLine());

		$this->assertTrue($this->object->setDisplayCodeLine(true));
		$this->assertEquals(true, $this->object->getDisplayCodeLine());

		$this->assertTrue($this->object->setDisplayCodeLine(false));
		$this->assertEquals(false, $this->object->getDisplayCodeLine());

		$this->assertFalse($this->object->setDisplayCodeLine('XXX'));
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDisplayIban
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getDisplayIban
	 */
	public function testSetDisplayIban()
	{
		$this->assertTrue($this->object->setDisplayIban());
		$this->assertEquals(true, $this->object->getDisplayIban());

		$this->assertTrue($this->object->setDisplayIban(true));
		$this->assertEquals(true, $this->object->getDisplayIban());

		$this->assertTrue($this->object->setDisplayIban(false));
		$this->assertEquals(false, $this->object->getDisplayIban());

		$this->assertFalse($this->object->setDisplayIban('XXX'));
	}

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::setDisplayPaymentReason
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getDisplayPaymentReason
	 */
	public function testSetDisplayPaymentReason()
	{
		$this->assertTrue($this->object->setDisplayPaymentReason());
		$this->assertEquals(true, $this->object->getDisplayPaymentReason());

		$this->assertTrue($this->object->setDisplayPaymentReason(true));
		$this->assertEquals(true, $this->object->getDisplayPaymentReason());

		$this->assertTrue($this->object->setDisplayPaymentReason(false));
		$this->assertEquals(false, $this->object->getDisplayPaymentReason());

		$this->assertFalse($this->object->setDisplayPaymentReason('XXX'));
	}

    /**
     * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getAllElements
     */
    public function testGetAllElementsOrangeType()
    {
		$elements = $this->object->getAllElements();

		$expectedElementsArray = array('bankLeft',
										'bankRight',
										'recipientLeft',
										'recipientRight',
										'accountLeft',
										'accountRight',
										'amountFrancsLeft',
										'amountFrancsRight',
										'amountCentsLeft',
										'amountCentsRight',
										'referenceNumberLeft',
										'referenceNumberRight',
										'payerLeft',
										'payerRight',
										'codeLine');

		foreach ($expectedElementsArray as $elementNr => $element) {
			$this->assertArrayHasKey($element, $elements);

			$this->assertArrayHasKey('lines', $elements[$element]);
			$this->assertArrayHasKey('attributes', $elements[$element]);
		}
    }

	/**
	 * @covers SwissPaymentSlip\SwissPaymentSlip\SwissPaymentSlip::getAllElements
	 * @todo Implement testGetAllElementsRedType
	 */
	public function testGetAllElementsRedType()
	{
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}
}
